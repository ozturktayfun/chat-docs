version: '3.8'

services:
  # FastAPI Application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_URL=postgresql://mythai_user:mythai_password@postgres:5432/mythai_db
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB_NAME=mythai
      - SECRET_KEY=your-super-secret-key-change-in-production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DEBUG=false
    depends_on:
      - postgres
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - mythai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mythai_db
      - POSTGRES_USER=mythai_user
      - POSTGRES_PASSWORD=mythai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - mythai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mythai_user -d mythai_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - mythai-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - mythai-network

  # Optional: Nginx reverse proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - app
  #   restart: unless-stopped
  #   networks:
  #     - mythai-network

volumes:
  postgres_data:
  mongodb_data:
  # redis_data:

networks:
  mythai-network:
    driver: bridge